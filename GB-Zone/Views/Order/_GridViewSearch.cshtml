@model System.Data.DataSet
@{
    string captionSearch = "";
    var grid = Html.DevExpress().GridView(st =>
    {
        st.Name = "gvSearch";
        st.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        st.ControlStyle.Paddings.Padding = System.Web.UI.WebControls.Unit.Pixel(0);
        st.ControlStyle.Border.BorderWidth = System.Web.UI.WebControls.Unit.Pixel(0);
        st.ControlStyle.BorderBottom.BorderWidth = System.Web.UI.WebControls.Unit.Pixel(1);
        st.SettingsPager.FirstPageButton.Visible = false;
        st.SettingsPager.LastPageButton.Visible = false;
        st.SettingsPager.PageSizeItemSettings.Visible = false;
        st.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50", "100" };
        st.SettingsPager.EnableAdaptivity = true;
        st.SettingsEditing.Mode = GridViewEditingMode.Batch;
        st.SettingsBehavior.AllowSelectByRowClick = false;
        st.CommandColumn.Visible = false;
        st.CommandColumn.ShowEditButton = false;
        st.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
        st.Settings.ShowTitlePanel = false;
        st.Settings.ShowFilterRow = false;
        st.Settings.ShowHeaderFilterButton = false;
        st.Settings.ShowFooter = false;
        st.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        st.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        st.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        st.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        st.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;
        st.CommandColumn.ShowNewButtonInHeader = false;
        st.SettingsPager.Visible = true;
        st.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
        st.ClientSideEvents.Init = "Init";
        st.ClientSideEvents.BatchEditChangesSaving = "BatchEditChangesSaving";
        st.ClientSideEvents.ColumnSorting = "ColumnSorting";
        st.ClientSideEvents.BatchEditChangesCanceling = "BatchEditChangesCanceling";
        st.ClientSideEvents.BatchEditConfirmShowing = "function(s, e){ e.cancel = true;}";// remove the alert to change the order or cancel button
        st.CallbackRouteValues = new { Controller = "Order", Action = "GridView", serverId = ViewData["server"].ToString(), moduleId = ViewData["moduleId"].ToString(), formId = ViewData["formId"].ToString(), parameters = ViewData["parameters"].ToString()};
        st.SettingsEditing.BatchUpdateRouteValues = new { Controller = "Order", Action = "BatchUpdateAction", serverId = ViewData["server"].ToString(), moduleId = ViewData["moduleId"].ToString(), formId = ViewData["formId"].ToString(), parameters = ViewData["parameters"].ToString() };
        foreach (System.Data.DataColumn dc in Model.Tables[ViewData["dataViewName"].ToString()].Columns)
        {
            if (dc.ExtendedProperties["is_primary_key"].ToString() == "Y")
            {
                st.KeyFieldName = dc.ColumnName;
            }
            if (dc.ExtendedProperties["is_header"] == null)
            {
                st.Columns.Add(col =>
                {
                    col.FieldName = dc.ColumnName;
                    col.Name = dc.ColumnName;
                    col.Caption = dc.Caption;
                    col.Settings.AllowSort = DefaultBoolean.True;
                    col.ReadOnly = dc.ReadOnly;
                    if (dc.ColumnMapping == System.Data.MappingType.Hidden)
                    {
                        col.Visible = false;
                    }

                    if (dc.ExtendedProperties["gui_hint"].ToString() == "DATE_CONTROL")
                        col.ColumnType = MVCxGridViewColumnType.DateEdit;
                    else if (dc.ExtendedProperties["gui_hint"].ToString() == "INTEGER_CONTROL")
                        col.ColumnType = MVCxGridViewColumnType.SpinEdit;
                    else if (dc.ExtendedProperties["gui_hint"].ToString() == "TEXT_CONTROL")
                        col.ColumnType = MVCxGridViewColumnType.TextBox;
                    else if (dc.ExtendedProperties["gui_hint"].ToString() == "TOGGLE_CONTROL")
                        col.ColumnType = MVCxGridViewColumnType.CheckBox;
                    else if (dc.ExtendedProperties["gui_hint"].ToString() == "SMALL_SINGLE_SELECT_CONTROL")
                    {
                        col.EditorProperties().ComboBox(p =>
                        {
                            p.DataSource = Model.Tables[dc.ExtendedProperties["group_name"].ToString()];
                            p.TextField = "title";
                            p.ValueField = "value";
                            p.ValueType = typeof(string);
                        });
                    }
                    if (dc.ColumnName == ViewData["systemCheckToSaveAction"].ToString())
                    {
                        col.CellStyle.CssClass = "id_" + ViewData["systemCheckToSaveAction"].ToString();
                        col.HeaderStyle.CssClass = "id_" + ViewData["systemCheckToSaveAction"].ToString();
                    }
                    if (dc.ColumnName == ViewData["systemCheckBefore"].ToString())
                    {
                        col.ReadOnly = true;
                        dc.ReadOnly = true;
                    }
                    if (dc.ColumnName == ViewData["systemCheckListColumName"].ToString())
                    {
                        captionSearch = dc.Caption;
                    }
                });
            }
        }
        st.CustomJSProperties = (s, e) =>
        {
            MVCxGridView g = s as MVCxGridView;
            e.Properties.Add("cpModelData", ViewData["jsonCheckLastSeccionItems"]);
            e.Properties.Add("cpCaptionSearch", captionSearch);
            e.Properties.Add("cpSystemCheckListColumName", ViewData["systemCheckListColumName"]);
            e.Properties.Add("cpSystemCheckToSaveAction", ViewData["systemCheckToSaveAction"]);
            e.Properties.Add("cpSystemCheckBefore", ViewData["systemCheckBefore"]);
        };
    });
    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
    grid.Bind(Model.Tables[ViewData["dataViewName"].ToString()]).GetHtml();
}